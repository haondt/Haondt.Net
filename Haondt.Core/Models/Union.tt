<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
<#
    var types = new List<string> { "T1" };
#>
using System.Diagnostics.CodeAnalysis;

namespace Haondt.Core.Models
{
<# 
for(int i = 2; i <= 6; i++)
{
        types.Add($"T{i}");
        var genericsString = string.Join(", ", types);
        var toStringString = $"Union<{string.Join(", ", types.Select(t => $"{{typeof({t}).Name}}"))}>({{_type.Name}}: {{_value}})";
#>
    public sealed record Union<<#Write(genericsString);#>>
<# 
foreach(var type in types)
{
#>
        where <#Write(type);#> : notnull 
<# 
}
#>
    {
        private readonly object _value = default!;
        private readonly Type _type = default!;

<# 
foreach(var type in types)
{
#>
        public Union(<#Write(type);#> value)
        {
            _value = value;
            _type = typeof(<#Write(type);#>);
        }
<# 
}
#>

        public object Unwrap()
        {
            return _value;
        }

        public bool Is<T>([MaybeNullWhen(false)] out T value) where T : notnull
        {
            if (typeof(T) == _type)
            {
                value = (T)_value;
                return true;
            }
            value = default;
            return false;
        }

        public Optional<T> As<T>() where T : notnull
        {
            if (Is<T>(out var value))
                return value;
            return new();
        }

        public T Cast<T>() where T : notnull
        {
            if (Is<T>(out var value))
                return value;
            throw new InvalidCastException($"Expected Union to contain type {typeof(T)}, but it was actually a {_type}.");
        }

<# 
foreach(var type in types)
{
#>
        public static implicit operator Union<<#Write(genericsString);#>>(<#Write(type);#> value) => new Union<<#Write(genericsString);#>>(value);
<# 
}
#>

<# 
foreach(var type in types)
{
#>
        public static explicit operator <#Write(type);#>(Union<<#Write(genericsString);#>> union) => union.Cast<<#Write(type);#>>();
<# 
}
#>

        public override string ToString() => $"<# Write(toStringString); #>";
    }
<#
} 
#>
}
